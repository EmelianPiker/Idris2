Processing as TTImp
Written TTC
Yaffle> \0 {m:31} : Main.Nat => \0 {a:30} : Type => \ys : (Main.Vect {m:31}[1] {a:30}[0]) => ys[0]
Yaffle> \0 {m:43} : Main.Nat => \0 {a:42} : Type => \0 {k:41} : Main.Nat => \x : {a:42}[1] => \xs : (Main.Vect {k:41}[1] {a:42}[2]) => \ys : (Main.Vect {m:43}[4] {a:42}[3]) => (Main.Cons (Main.plus {k:41}[3] {m:43}[5]) {a:42}[4] x[2] (Main.append {m:43}[5] {a:42}[4] {k:41}[3] xs[1] ys[0]))
Yaffle> [((Main.app2 (Main.Nil [Just a = _])) $y) = y, ((Main.app2 ((((Main.Cons [Just k = _]) [Just a = _]) $x) $z)) $y) = ((((Main.Cons [Just k = ((Main.plus {_:225}) {m:227})]) [Just a = {_:226}]) x) (((((Main.app2 [Just m = {m:227}]) [Just a = {_:226}]) [Just n = {_:225}]) z) y))]
Yaffle> [((Main.zip (Main.Nil [Just a = _])) $y) = (Main.Nil [Just a = ((Main.Pair {_:202}) {b:203})]), ((Main.zip ((((Main.Cons [Just k = _]) [Just a = _]) $x) $z)) ((((Main.Cons [Just k = _]) [Just a = _]) $y) $w)) = ((((Main.Cons [Just k = {_:348}]) [Just a = ((Main.Pair {_:349}) {_:350})]) ((((Main.MkPair [Just b = {_:350}]) [Just a = {_:349}]) x) y)) (((((Main.zip [Just b = {_:350}]) [Just a = {_:349}]) [Just n = {_:348}]) z) w))]
Yaffle> [(((Main.zipWith $f) (Main.Nil [Just a = _])) $y) = (Main.Nil [Just a = {c:218}]), (((Main.zipWith $f) ((((Main.Cons [Just k = _]) [Just a = _]) $x) $z)) ((((Main.Cons [Just k = _]) [Just a = _]) $y) $w)) = ((((Main.Cons [Just k = {_:472}]) [Just a = {c:475}]) ((f x) y)) (((((((Main.zipWith [Just n = {_:472}]) [Just c = {c:475}]) [Just b = {_:474}]) [Just a = {_:473}]) f) z) w))]
Yaffle> Bye for now!
